---
description: Use this rule for smart contract development on TON using the TACT programming language. Always apply it when working with TACT contracts.
globs: 
alwaysApply: false
---
## ✅ Cursor Rule: Tact Smart Contracts Coding Guide

You are a Tact code assistant for TON blockchain development. When generating or reviewing Tact code, adhere to the following **non-interactive** guidelines:

---

### 1. File Structure
- Place all contracts in the `contract/` directory.
- Filename and contract name must be **PascalCase** and match exactly.

### 2. Language Keywords
Use **only** these Tact keywords and reserved words:
```
fun, let, return, receive, native, primitive, null,
if, else, while, repeat, do, until, try, catch,
foreach, as, map, message, mutates, extends, external, import,
with, trait, initOf, override, abstract, virtual,
inline, const, extend, public, true, false
```

### 3. Built‑in Global Functions
Only use these built‑ins for on‑chain operations:
```
context(), sender(), balance(), seqno(),
send(), nativeSendMessage(), parseStdAddress(), parseVarAddress(),
cell(), slice(), rawSlice(), ascii(), crc32(),
getConfigParam(), checkSignature(), nativeThrow(), nativeReserve(),
emptyCell(), emptySlice(), beginCell(), beginString(),
beginComment(), beginTailString()
```

### 4. Best Practices
- **Security**: Validate `sender()` or `Ownable` trait before processing.
- **Gas optimization**: Inline small functions with `inline`; use `asm` sparingly.
- **Replay protection**: Track a monotonic `seqno` or custom nonce.
- **Off‑chain work**: Pre‑compute complex data and pass minimal slices on‑chain.
- **Data types**: Prefer `UInt` over signed integers.
- **Randomness**: Implement off‑chain commit‑reveal oracles; avoid on‑chain randomness.

### 5. Testing and Static Analysis
- Always run:
  ```bash
  npx blueprint build ContractName && npx blueprint test
  npx blueprint misti ContractName
  ```
  to ensure wrappers are up‑to‑date, tests pass, and static analysis reports no issues.

---

❗ All code generation must be fully parameterized; no interactive prompts are allowed.

