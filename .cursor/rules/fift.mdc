---
description: Instructions for creating and structuring Fift files for TON blockchain, including stack manipulation, TVM assembly integration, and best practices.
globs: *.fif, *.fiftxt
alwaysApply: true
---
## ‚úÖ **Fift for TON Blockchain**

**Fift** ‚Äî a stack-based, high-level programming language used for local manipulation with cells and TVM primitives, primarily for converting TVM assembly into contract code bag-of-cells.

**Primary uses:**
- Converting TVM assembly into binary smart contract code
- Defining TVM assembly opcodes and operations
- Manipulating cells and other TON-specific data structures
- Creating flexible deployment scripts

---

## ‚ö°Ô∏è **Core Language Concepts**

- üìå **Stack-based execution model**:
  - Operations consume and produce values on a stack
  - Execution flows from left to right (reverse Polish notation)

- üìå **Basic syntax elements**:
```plaintext
"string literals", { blocks }, integers, ."printed text",
: word-definition, :: active-word-definition, 
include, if, ifnot, cond, execute, times, while, until
```

- üìå **Word definition** (functions):
```fift
{ dup * } : square    // Defines 'square' to duplicate top value and multiply
{ minmax drop } : min  // Defines 'min' to get minimum of two values
```

- üìå **Control structures**:
```fift
{ ."true" } { ."false" } cond  // Conditional execution based on stack flag
{ ... } while                  // Loop while condition is true
{ ... } until                  // Loop until condition is true
{ ... } 5 times                // Execute block 5 times
```

---

## üöß **Stack Manipulation Words**

```plaintext
dup (duplicate top element), drop (remove top element), 
swap (exchange top two elements), rot (rotate top three elements),
over (copy second element to top), tuck (place top element at third position),
pick (copy Nth element to top), roll (rotate N top elements)
```

---

## üìå **TVM Assembly Integration**

- üìå **Creating assembly opcodes**:
```fift
x{00} @Defop NOP          // Define NOP opcode (0x00)
x{A988} @Defop MULDIVMOD  // Define MULDIVMOD opcode (0xA988)
```

- üìå **Assembling smart contracts**:
```fift
<{                         // Start of assembly code
  SETCP0 DUP IFNOTRET     // Standard preamble
  // ... contract logic ...
  ACCEPT
  // ... more logic ...
}>c                        // End assembly, compile to cell
```

- üìå **Including external files/BOCs**:
```fift
"path/to/file.boc" file>B B>boc ref,  // Include external BOC via reference
"standard-lib.fif" include            // Include another Fift source file
```

---

## üìå **Best Practices**

- **Execute Fift code in compile-time context only**\
  *(Fift is executed during contract compilation, not on-chain)*

- **Use appropriate opcode definitions with `@Defop` and `@addop`**\
  *(ensures proper bit/reference space checking and automatic jumps)*

- **Comment complex stack manipulations**\
  *(stack notation: `(x y -- z)` means 'consumes x,y and produces z')*

- **Prefer modular definitions and reusable blocks**\
  *(define custom words for repeated operations)*

- **Validate BOC structures before inclusion**\
  *(improper cell structures can lead to deployment failures)*

- **For TVM assembly structures that need extra precision:**
  ```fift
  PROGRAM{
    DECLPROC recv_internal
    recv_internal PROC:<{
      // Precise TVM code inside
    }>
  }END>c
  ```

- **Use dictionary operations for working with hashmaps**\
  *(idict!, dict!, dict@, etc.)*

- **Handle errors explicitly** using throw or throw-unless operations 