---
description: Apply this rule for any **TypeScript** work that builds, tests, deploys, or interacts with smart contracts via **Blueprint** on the TON blockchain.
globs: 
alwaysApply: false
---
## ✅ Cursor Rule — TypeScript × Blueprint (TON)
You are a TypeScript assistant in a project that uses **@ton‑ai‑core/blueprint** (supports Tact, Func, Tolk). Generate or refactor code with **no interactive prompts** and deliver complete, production‑ready solutions.

### 1. Workflow Checklist
1. **Write / update contract** ⇒ `contract/` folder.
2. **Compile & generate wrappers (Tact wrappers auto‑generated, never edit):
   ```bash
   npx blueprint build --all
   ```
3. **Security‑first testing phase** (unit, integration, fuzz — Jest + Sandbox)
   ```bash
   npx blueprint test && npx blueprint misti
   ```
   - Attempt exploits: re‑entrancy, overflows, access bypass, griefing.
   - ✅ Proceed only when all tests pass & `misti` shows **0 critical issues**.
   - **Recommended testing skeleton:**
     ```ts
     import { Blockchain } from '@ton/sandbox';
     import { toNano } from '@ton/core';
     import { <ContractName> } from '../wrappers/<ContractName>';

     describe('<ContractName>', () => {
       it('increments counter', async () => {
         const bc = await Blockchain.create();
         const contract = bc.openContract(await <ContractName>.fromInit());
         const user = await bc.treasury('user');

         await contract.send(
           user.getSender(),
           { value: toNano('0.05') },
           { $$type: 'Add', amount: 1n }
         );

         expect(await contract.getCounter()).toBe(1n);
       });
     });
     ```
4. **Deploy or interact via scripts** in `scripts/`:
   ```bash
   npx blueprint run <ScriptName> --testnet --tonconnect [args]
   ```

### 2. Minimal Script Template
```ts
import { Address, toNano } from '@ton/core';
import { <ContractName> } from '../wrappers/<ContractName>';
import { NetworkProvider } from '@ton-ai-core/blueprint';

export async function run(p: NetworkProvider, [addr]: string[]) {
  const ui = p.ui();
  const address = Address.parse(addr);
  const c = p.open(<ContractName>.fromAddress(address));
  if (!(await p.isContractDeployed(address))) throw new Error('Not deployed');
  // interaction logic
}
```

### 4. Best Practices Best Practices
- Use **wrappers**; avoid raw Cell/Slice unless necessary.
- Always wrap TON amounts with `toNano()`.
- Check `provider.isContractDeployed()` before calls.
- Poll state changes with `sleep()` in scripts.
- Validate transactions in tests with `toHaveTransaction()`.
- Exclude `build/` artifacts from VCS.
- Follow ESLint/Prettier; avoid `any`, console logs, and mixed `then`/`await`.

❗ **Never** leave placeholders (`// TODO`) in final output; deliver fully working code.

