---
description: Instructions for creating and structuring new Func smart contract files (*.fc, *.func) for the TON blockchain using Blueprint. Includes development workflow, contract compilation, testing, and deployment guidelines.
globs: *.fc, *.func, *.functxt, *.fctxt
alwaysApply: true
---
## ✅ **Func Smart Contracts for TON Blockchain (with Blueprint)**

**Func** — a secure, low-level, blockchain-optimized programming language for writing efficient smart contracts on TON (The Open Network).

**Blueprint** — a toolkit simplifying contract compilation, testing, and deployment workflows for Func contracts.

---

## ⚡️ **Development Workflow**

- 📌 **Write contracts** inside the `contract/` directory.\
  Use allowed keywords and structures:

```plaintext
#include, #pragma, int, cell, slice, builder, cont, tuple, var, (), _,
global, const, impure, inline, inline_ref, return, if, ifnot, else,
elseif, elseifnot, repeat, while, do, until, method_id, asm, throw, throw_unless, throw_if,
begin_cell, store_uint, store_int, end_cell, begin_parse, end_parse,
store_slice, load_uint, load_int, slice_empty?, get_data, set_data,
get_methods, load_data, save_data, recv_internal
```

- 📌 **Compile contracts**:

```bash
npx blueprint build
```

Compiled output → located in the `build/` directory.

- 📌 **Write TypeScript wrappers manually** *(contract interaction classes)*:

Wrappers → manually created in the `wrappers/` directory.

- 📌 **Testing** (logic, opcodes, exceptions):

```bash
npx blueprint test
```

- 📌 **Scripts and Deployment** (located in `scripts/` folder):

```bash
npx blueprint run
```

---

## 🚧 **Important Built-in Methods and Functions in Func**

```plaintext
get_data(), set_data(), begin_cell(), store_uint(), load_uint(), store_slice(), load_int(), throw(), throw_unless(), throw_if(), recv_internal(), slice_empty?(), begin_parse(), end_parse()
```

*Note: Refer to the official Func stdlib for comprehensive documentation.*

---

## 📌 **Best Practices for Func Contracts**

- **Prefer writing typical token and payment channel contracts in a single file**\
  *(split logic into modules only for complex systems like DEXs)*

- **Avoid excessive use of global state variables**\
  *(store minimal necessary data)*

- **Write smaller, well-structured functions**\
  *(use inline helper functions as needed)*

- **Audit and optimize data parsing functions carefully**\
  *(use precise parsing with clear `begin_parse()`/`end_parse()` blocks)*

- **Use `asm` blocks for critical performance and gas optimizations**

- **Never process strings directly on-chain**\
  *(use binary data structures instead)*

- **Prefer arithmetic logic over conditional checks**\
  *(efficient opcode usage)*, e.g.:

```func
int value = 1 + sign(msg_value);
```

- **Explicitly handle errors** using `throw()`, `throw_unless()` or `throw_if()`

- **For message sending and contract interaction:**

  - Construct messages explicitly using `begin_cell()`
  - Minimize unnecessary message forwarding *(reduces gas usage)*
