import { TonClient, WalletContractV4, internal } from "@ton/ton";
import { mnemonicToPrivateKey } from "@ton/crypto";
import { toNano, beginCell, Cell, Address } from "@ton/core";

// === CONFIGURATION ===
const MNEMONIC = process.env.TON_MNEMONIC?.split(" ") || [
    "ticket", "sea", "movie", "present", "outer", "dash", "attract", "clip",
    "pepper", "slow", "employ", "rubber", "one", "gentle", "razor", "step", 
    "method", "alien", "cash", "tooth", "side", "green", "tired", "honey"
];

// === UTILITY FUNCTIONS ===
async function sleep(seconds: number): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, seconds * 1000));
}

async function apiCallWithRetry<T>(
    apiCall: () => Promise<T>, 
    maxRetries: number = 3, 
    delaySeconds: number = 3
): Promise<T> {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            if (attempt > 1) await sleep(delaySeconds);
            return await apiCall();
        } catch (error: any) {
            const isRateLimit = error?.response?.status === 429 || error?.status === 429;
            if (attempt === maxRetries) throw error;
            if (isRateLimit) await sleep(delaySeconds * attempt);
        }
    }
    throw new Error("Max retries exceeded");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ external message —Å–æ–≥–ª–∞—Å–Ω–æ TEP-467
 * https://raw.githubusercontent.com/ton-blockchain/TEPs/8b3beda2d8611c90ec02a18bec946f5e33a80091/text/0467-normalized-message-hash.md
 * 
 * –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´:
 * 1. Source Address (src): –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ addr_none$00
 * 2. Import Fee (import_fee): –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ 0  
 * 3. StateInit (init): –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ empty
 * 4. Body: –í–°–ï–ì–î–ê —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ Reference (–Ω–µ inline)
 * 
 * –°–õ–û–ñ–ù–û–°–¢–¨: –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Address.parse() —Å bounceable: false –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function normalizeExternalMessage(destAddress: Address, bodyCell: Cell): Cell {
    try {
        const normalizedExtMessage = beginCell()
            .storeUint(0b10, 2) // ext_msg prefix (10 in binary)
            .storeUint(0, 2) // src -> addr_none (–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø!)
            .storeAddress(Address.parse(destAddress.toString({ bounceable: false }))) // dest address
            .storeCoins(0) // import_fee:Grams -> 0 (–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø!)
            .storeBit(false) // init:(Maybe (Either StateInit ^StateInit)) -> nothing$0 (–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø!)
            .storeBit(true) // body:(Either X ^X) -> right$1 (–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø!)
            .storeRef(bodyCell) // Store body as reference (–ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø!)
            .endCell();

        return normalizedExtMessage;
    } catch (error: any) {
        console.error("‚ùå Error in normalization:", error.message);
        throw error;
    }
}

/**
 * –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö—ç—à—É –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
 * 
 * –°–õ–û–ñ–ù–û–°–¢–ò:
 * 1. –ù—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É hex –∏ base64 —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
 * 2. –•—ç—à–∏ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö: in_msg.hash, body_hash, transaction_id.hash
 * 3. –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ API —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å ~10 —Å–µ–∫)
 */
async function findTransactionByHash(address: string, txHash: string): Promise<string | null> {
    /* ALTERNATIVE API: TonAPI (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á)
    try {
        const tonApiUrl = `https://testnet.tonapi.io/v2/accounts/${address}/traces?limit=10`;
        const tonApiRes = await fetch(tonApiUrl, {
            headers: {
                'Authorization': 'Bearer YOUR_API_KEY_HERE'
            }
        });
        
        if (tonApiRes.ok) {
            const tonApiData = await tonApiRes.json();
            const txHashBase64 = Buffer.from(txHash, 'hex').toString('base64');
            
            for (const trace of tonApiData.traces || []) {
                // TonAPI –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç external_hash –∏ hash_norm –Ω–∞–ø—Ä—è–º—É—é
                if (trace.external_hash === txHashBase64 || trace.hash_norm === txHashBase64) {
                    return txHash;
                }
            }
        }
    } catch (e) {
        console.log("TonAPI failed, falling back to TonCenter...");
    }
    */

    // –û–°–ù–û–í–ù–û–ô API: TonCenter (–ø—É–±–ª–∏—á–Ω—ã–π, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)
    const url = `https://testnet.toncenter.com/api/v2/getTransactions?address=${address}&limit=10`;
    const res = await fetch(url);
    const data = await res.json();
    
    if (!data.ok) return null;
    
    const txHashBase64 = Buffer.from(txHash, 'hex').toString('base64');
    
    for (const tx of data.result) {
        const inMsgHash = tx.in_msg?.hash;
        const txId = tx.transaction_id?.hash;
        const bodyHash = tx.in_msg?.body_hash;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 —Ö—ç—à–∏ –≤ hex –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const inMsgHashHex = inMsgHash ? Buffer.from(inMsgHash, 'base64').toString('hex') : '';
        const txIdHex = txId ? Buffer.from(txId, 'base64').toString('hex') : '';
        const bodyHashHex = bodyHash ? Buffer.from(bodyHash, 'base64').toString('hex') : '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (base64 –∏ hex)
        if (inMsgHash === txHashBase64 || 
            txId === txHashBase64 || 
            bodyHash === txHashBase64 ||
            inMsgHashHex === txHash ||
            txIdHex === txHash ||
            bodyHashHex === txHash) {
            return txHash;
        }
    }
    
    return null;
}

async function main() {
    console.log("=== TON Hash CLI Demo ===\n");

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageBody = beginCell()
        .storeUint(0, 32) // op code
        .storeStringTail("Hello TON!")
        .endCell();
    
    console.log("Message Body Hash:", messageBody.hash().toString("hex"));

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
    const keyPair = await mnemonicToPrivateKey(MNEMONIC);
    const wallet = WalletContractV4.create({ workchain: 0, publicKey: keyPair.publicKey });
    const walletAddress = wallet.address;
    console.log("Wallet Address:", walletAddress.toString());

    try {
        const client = new TonClient({ 
            endpoint: "https://testnet.toncenter.com/api/v2/jsonRPC" 
        });
        const contract = client.open(wallet);

        // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
        const seqno = await apiCallWithRetry(() => contract.getSeqno());
        const balance = await apiCallWithRetry(() => contract.getBalance());
        console.log("Current seqno:", seqno);
        console.log("Wallet balance:", balance.toString(), "nanotons");

        if (balance < toNano("0.02")) {
            console.log("‚ö†Ô∏è Insufficient balance for transaction");
            return;
        }

        // 4. –°–æ–∑–¥–∞–Ω–∏–µ external message —á–µ—Ä–µ–∑ wrapper
        const internalMessage = internal({
            to: walletAddress,
            value: toNano("0.01"),
            body: messageBody
        });

        const externalMessage = await contract.createTransfer({
            seqno,
            secretKey: keyPair.secretKey,
            messages: [internalMessage]
        });
        
        const originalHash = externalMessage.hash().toString("hex");
        const originalBoC = externalMessage.toBoc().toString("base64");
        console.log("\nOriginal External Message Hash:", originalHash);
        console.log("Original External Message BoC:", originalBoC);

        // 5. === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –°–û–ì–õ–ê–°–ù–û TEP-467 ===
        console.log("\n=== HASH NORMALIZATION DEMONSTRATION ===");
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const normalizedExternalMessage = normalizeExternalMessage(walletAddress, messageBody);
        const normalizedHash = normalizedExternalMessage.hash().toString("hex");
        const normalizedBoC = normalizedExternalMessage.toBoc().toString("base64");
        
        console.log("Original Hash:   ", originalHash);
        console.log("Normalized Hash:", normalizedHash);
        console.log("Original BoC:    ", originalBoC);
        console.log("Normalized BoC:  ", normalizedBoC);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (originalHash === normalizedHash) {
            console.log("\n–†–ê–í–ù–´–ï —Ö—ç—à–∏: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ");
        } else {
            console.log("\n–†–ê–ó–ù–´–ï —Ö—ç—à–∏!");
        }

        // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω –∏ –ø–æ–∏—Å–∫
        console.log("\nüì° Sending transaction...");
        await apiCallWithRetry(async () => {
            await contract.send(externalMessage);
            return true;
        });
        console.log("‚úÖ Transaction sent successfully");

        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        console.log("Searching for transaction in blockchain...");
        await sleep(10); // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        
        const foundOriginal = await apiCallWithRetry(() => 
            findTransactionByHash(walletAddress.toString(), originalHash)
        );
        
        const foundNormalized = await apiCallWithRetry(() => 
            findTransactionByHash(walletAddress.toString(), normalizedHash)
        );
        
        console.log("\nBlockchain Search Results:");
        console.log("Original hash found:   ", foundOriginal ? "‚úÖ YES" : "‚ùå NO");
        console.log("Normalized hash found: ", foundNormalized ? "‚úÖ YES" : "‚ùå NO");

        console.log(`\nüîó Check transaction: https://testnet.tonscan.org/address/${walletAddress.toString()}`);

    } catch (error: any) {
        console.error("‚ùå Error:", error.message || error);
    }

    console.log("\nüéâ === Demo Complete ===");
}

main().catch((e: any) => {
    console.error("‚ùå Fatal Error:", e.message || e);
    process.exit(1);
}); 